name: Release PR check

on:
  pull_request:
    branches:
      - release-*
    types: [opened, synchronize, reopened, edited, ready_for_review]

jobs:
  check-commits:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '16.x'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check commits
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;
            const baseRefName = context.payload.pull_request.base.ref;
            const maxCommitsToCheck = 200;

            const commitsOnPR = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: maxCommitsToCheck
            });

            const commitsOnDevelop = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `develop`,
              per_page: maxCommitsToCheck
            });

            const commitHashesOnPR = commitsOnPR.data.map(commit => commit.sha);
            const commitHashesOnDevelop = commitsOnDevelop.data.map(commit => commit.sha);
            const missingCommits = commitHashesOnPR.filter(commit => !commitHashesOnDevelop.includes(commit));

            const warningComment = '**WARNING:** This PR includes commits that are not present in the develop branch. Please add the following commits to `develop` and cherry-pick them into this release branch:\n';
            const commentBody = missingCommits.length > 0
              ? `${warningComment}- ${missingCommits.join("\n- ")}`
              : "";

            // Check if there's already a warning comment on the PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingWarningComment = comments.data.find((comment) =>
              comment.body.includes(warningComment)
            );

            // If there's no existing warning comment and there are missing commits, add a new warning comment
            if (!existingWarningComment && missingCommits.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }
            
            // If there's an existing warning comment and there are still missing commits, update the warning comment
            if (existingWarningComment && missingCommits.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
                comment_id: existingWarningComment.id,
              });
            }

            // If there's an existing warning comment and there are no missing commits, delete the warning comment
            if (existingWarningComment && missingCommits.length === 0) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingWarningComment.id,
              });
            }
